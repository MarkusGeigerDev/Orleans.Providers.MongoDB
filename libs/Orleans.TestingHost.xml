<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.TestingHost</name>
    </assembly>
    <members>
        <member name="M:Orleans.TestingHost.ClientExtensions.GetTestHooks(Orleans.IClusterClient,Orleans.TestingHost.SiloHandle)">
            <summary>
            Returns test hooks for the specified silo.
            </summary>
            <param name="client">The client.</param>
            <param name="silo">The silo.</param>
            <returns>Test hooks for the specified silo.</returns>
        </member>
        <member name="T:Orleans.TestingHost.IClientBuilderConfigurator">
            <summary>
            Allows implementations to configure the client builder when starting up each silo in the test cluster.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.IClientBuilderConfigurator.Configure(Microsoft.Extensions.Configuration.IConfiguration,Orleans.IClientBuilder)">
            <summary>
            Configures the client builder
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.IHostConfigurator">
            <summary>
            Allows implementations to configure the host builder when starting up each silo in the test cluster.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.IHostConfigurator.Configure(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            Configures the host builder.
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.InProcessSiloHandle">
            <summary>
            Represents a handle to a silo that is deployed in the same process and AppDomain.
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.InProcessSiloHandle.SiloHost">
            <summary>Gets a reference to the silo host.</summary>
        </member>
        <member name="P:Orleans.TestingHost.InProcessSiloHandle.IsActive">
            <inheritdoc />
        </member>
        <member name="M:Orleans.TestingHost.InProcessSiloHandle.CreateAsync(System.String,System.Collections.Generic.IList{Microsoft.Extensions.Configuration.IConfigurationSource})">
            <summary>Creates a new silo and returns a handle to it.</summary>
            <param name="siloName">The name for the new silo.</param>
            <param name="configurationSources">
            The configuration sources, interpreted by <see cref="M:Orleans.TestingHost.TestClusterHostFactory.CreateSiloHost(System.String,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Configuration.IConfigurationSource})"/>.
            </param>
        </member>
        <member name="M:Orleans.TestingHost.InProcessSiloHandle.StopSiloAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.TestingHost.InProcessSiloHandle.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.TestingHost.ISiloBuilderConfigurator">
            <summary>
            Allows implementations to configure the host builder when starting up each silo in the test cluster.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.ISiloBuilderConfigurator.Configure(Orleans.Hosting.ISiloHostBuilder)">
            <summary>
            Configures the silo host builder.
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.ISiloConfigurator">
            <summary>
            Allows implementations to configure the silo builder when starting up each silo in the test cluster.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.ISiloConfigurator.Configure(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Configures the silo builder.
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.Logging.FileLoggingOutput">
            <summary>
            The log output which all <see cref="T:Orleans.TestingHost.Logging.FileLogger"/> share to log messages to 
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Logging.FileLoggingOutput.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Orleans.TestingHost.Logging.FileLoggingOutput.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String},System.String)">
            <summary>
            Log message for <see cref="T:Orleans.TestingHost.Logging.FileLogger"/> instance whose category is <paramref name="category"/>
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
            <param name="category"></param>
        </member>
        <member name="M:Orleans.TestingHost.Logging.FileLoggingOutput.Close">
            <summary>
            Close the output
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.Logging.FileLogger">
            <summary>
            File logger, which logs messages to a file.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Logging.FileLogger.#ctor(Orleans.TestingHost.Logging.FileLoggingOutput,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Logging.FileLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.TestingHost.Logging.FileLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.TestingHost.Logging.FileLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.TestingHost.Logging.FileLoggerProvider">
            <summary>
            FileLoggerProvider implements ILoggerProvider, creates <see cref="T:Orleans.TestingHost.Logging.FileLogger"/>
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.Logging.FileLoggerProviderExtensions">
            <summary>
            Extension methods to configure ILoggingBuilder with FileLoggerProvider
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Logging.FileLoggerProviderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)">
            <summary>
            Add <see cref="T:Orleans.TestingHost.Logging.FileLoggerProvider"/> to <paramref name="builder"/>
            </summary>
            <param name="builder">logging builder</param>
            <param name="filePathName">log file path</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.TestingHost.SiloHandle">
            <summary>
            Represents a handle to a silo that is remotely deployed
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.ClusterOptions">
            <summary> Get or set configuration of the cluster </summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.InstanceNumber">
            <summary> Gets or sets the instance number within the cluster.</summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.Name">
            <summary> Get or set the name of the silo </summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.SiloAddress">
            <summary>Get or set the address of the silo</summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.IsActive">
            <summary>Gets whether the remote silo is expected to be active</summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.StopSiloAsync(System.Boolean)">
            <summary>Stop the remote silo</summary>
            <param name="stopGracefully">Specifies whether the silo should be stopped gracefully or abruptly.</param>
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.StopSiloAsync(System.Threading.CancellationToken)">
            <summary>Stop the remote silo. This method cannot be use with AppDomain</summary>
            <param name="ct">Specifies the cancellation token to use for the shutdown sequence</param>
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.Dispose(System.Boolean)">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.Finalize">
            <inheritdoc />
        </member>
        <member name="T:Orleans.TestingHost.TestCluster">
            <summary>
            A host class for local testing with Orleans using in-process silos. 
            Runs a Primary and optionally secondary silos in separate app domains, and client in the main app domain.
            Additional silos can also be started in-process on demand if required for particular test cases.
            </summary>
            <remarks>
            Make sure that your test project references your test grains and test grain interfaces 
            projects, and has CopyLocal=True set on those references [which should be the default].
            </remarks>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.Primary">
            <summary>
            Primary silo handle, if applicable.
            </summary>
            <remarks>This handle is valid only when using Grain-based membership.</remarks>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.SecondarySilos">
            <summary>
            List of handles to the secondary silos.
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.Silos">
            <summary>
            Collection of all known silos.
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.Options">
            <summary>
            Options used to configure the test cluster.
            </summary>
            <remarks>This is the options you configured your test cluster with, or the default one. 
            If the cluster is being configured via ClusterConfiguration, then this object may not reflect the true settings.
            </remarks>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.InternalClient">
            <summary>
            The internal client interface.
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.GrainFactory">
            <summary>
            GrainFactory to use in the tests
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.InternalGrainFactory">
            <summary>
            GrainFactory to use in the tests
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.ServiceProvider">
            <summary>
            Client-side <see cref="T:System.IServiceProvider"/> to use in the tests.
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.SerializationManager">
            <summary>
            SerializationManager to use in the tests
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.CreateSiloAsync">
            <summary>
            Delegate used to create and start an individual silo.
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.PortAllocator">
            <summary>
            The port allocator.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.#ctor(Orleans.TestingHost.TestClusterOptions,System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.Configuration.IConfigurationSource},Orleans.TestingHost.ITestClusterPortAllocator)">
            <summary>
            Configures the test cluster plus client in-process.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.Deploy">
            <summary>
            Deploys the cluster using the specified configuration and starts the client in-process.
            It will start the number of silos defined in <see cref="P:Orleans.TestingHost.TestClusterOptions.InitialSilosCount"/>.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.DeployAsync">
            <summary>
            Deploys the cluster using the specified configuration and starts the client in-process.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.GetActiveSilos">
            <summary>
            Get the list of current active silos.
            </summary>
            <returns>List of current silos.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.GetSiloForAddress(Orleans.Runtime.SiloAddress)">
            <summary>
            Find the silo handle for the specified silo address.
            </summary>
            <param name="siloAddress">Silo address to be found.</param>
            <returns>SiloHandle of the appropriate silo, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.WaitForLivenessToStabilizeAsync(System.Boolean)">
            <summary>
            Wait for the silo liveness sub-system to detect and act on any recent cluster membership changes.
            </summary>
            <param name="didKill">Whether recent membership changes we done by graceful Stop.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.GetLivenessStabilizationTime(Orleans.Configuration.ClusterMembershipOptions,System.Boolean)">
            <summary>
            Get the timeout value to use to wait for the silo liveness sub-system to detect and act on any recent cluster membership changes.
            <seealso cref="M:Orleans.TestingHost.TestCluster.WaitForLivenessToStabilizeAsync(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StartAdditionalSilo(System.Boolean)">
            <summary>
            Start an additional silo, so that it joins the existing cluster.
            </summary>
            <returns>SiloHandle for the newly started silo.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StartAdditionalSiloAsync(System.Boolean)">
            <summary>
            Start an additional silo, so that it joins the existing cluster.
            </summary>
            <returns>SiloHandle for the newly started silo.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StartAdditionalSilosAsync(System.Int32,System.Boolean)">
            <summary>
            Start a number of additional silo, so that they join the existing cluster.
            </summary>
            <param name="silosToStart">Number of silos to start.</param>
            <param name="startAdditionalSiloOnNewPort"></param>
            <returns>List of SiloHandles for the newly started silos.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StopSecondarySilosAsync">
            <summary>
            Stop any additional silos, not including the default Primary silo.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StopPrimarySiloAsync">
            <summary>
            Stops the default Primary silo.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StopAllSilos">
            <summary>
            Stop all current silos.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StopAllSilosAsync">
            <summary>
            Stop all current silos.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StopSiloAsync(Orleans.TestingHost.SiloHandle)">
            <summary>
            Do a semi-graceful Stop of the specified silo.
            </summary>
            <param name="instance">Silo to be stopped.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.KillSiloAsync(Orleans.TestingHost.SiloHandle)">
            <summary>
            Do an immediate Kill of the specified silo.
            </summary>
            <param name="instance">Silo to be killed.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.KillClientAsync">
            <summary>
            Performs a hard kill on client.  Client will not cleanup resources.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.RestartSiloAsync(Orleans.TestingHost.SiloHandle)">
            <summary>
            Do a Stop or Kill of the specified silo, followed by a restart.
            </summary>
            <param name="instance">Silo to be restarted.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.RestartStoppedSecondarySiloAsync(System.String)">
            <summary>
            Restart a previously stopped.
            </summary>
            <param name="siloName">Silo to be restarted.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.InitializeClient">
            <summary>
            Initialize the grain client. This should be already done by <see cref="M:Orleans.TestingHost.TestCluster.Deploy"/> or <see cref="M:Orleans.TestingHost.TestCluster.DeployAsync"/>
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StartSiloAsync(Orleans.TestingHost.TestCluster,System.Int32,Orleans.TestingHost.TestClusterOptions,System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.Configuration.IConfigurationSource},System.Boolean)">
            <summary>
            Start a new silo in the target cluster
            </summary>
            <param name="cluster">The TestCluster in which the silo should be deployed</param>
            <param name="instanceNumber">The instance number to deploy</param>
            <param name="clusterOptions">The options to use.</param>
            <param name="configurationOverrides">Configuration overrides.</param>
            <param name="startSiloOnNewPort">Whether we start this silo on a new port, instead of the default one</param>
            <returns>A handle to the silo deployed</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StartSiloAsync(System.Int32,Orleans.TestingHost.TestClusterOptions,System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.Configuration.IConfigurationSource},System.Boolean)">
            <summary>
            Starts a new silo.
            </summary>
            <param name="instanceNumber">The instance number to deploy</param>
            <param name="clusterOptions">The options to use.</param>
            <param name="configurationOverrides">Configuration overrides.</param>
            <param name="startSiloOnNewPort">Whether we start this silo on a new port, instead of the default one</param>
            <returns>A handle to the deployed silo.</returns>
        </member>
        <member name="T:Orleans.TestingHost.TestClusterBuilder">
            <summary>Configuration builder for starting a <see cref="T:Orleans.TestingHost.TestCluster"/>.</summary>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterBuilder.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Orleans.TestingHost.TestClusterBuilder"/> using the default options.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterBuilder.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of <see cref="T:Orleans.TestingHost.TestClusterBuilder"/> overriding the initial silos count.
            </summary>
            <param name="initialSilosCount">The number of initial silos to deploy.</param>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterBuilder.PortAllocator">
            <summary>
            Gets or sets the port allocator used to allocate consecutive silo ports.
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterBuilder.Properties">
            <summary>
            Configuration values which will be provided to the silos and clients created by this builder.
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterBuilder.CreateSiloAsync">
            <summary>
            Delegate used to create and start an individual silo.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Set up the configuration for the builder itself. This will be used as a base to initialize each silo host
            for use later in the build process. This can be called multiple times and the results will be additive.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the host.</param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterBuilder.AddSiloBuilderConfigurator``1">
            <summary>
            Adds an implementation of <see cref="T:Orleans.TestingHost.ISiloConfigurator"/>, <see cref="T:Orleans.TestingHost.IHostConfigurator"/>, or <see cref="T:Orleans.TestingHost.ISiloBuilderConfigurator"/> to configure silos created by the test cluster.
            </summary>
            <typeparam name="T">The configurator type.</typeparam>
        </member>
        <member name="T:Orleans.TestingHost.TestClusterHostFactory">
            <summary>
            Utility for creating silos given a name and collection of configuration sources.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterHostFactory.CreateSiloHost(System.String,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Configuration.IConfigurationSource})">
            <summary>
            Creates an returns a new silo.
            </summary>
            <param name="hostName">The silo name if it is not already specified in the configuration.</param>
            <param name="configurationSources">The configuration.</param>
            <returns>A new silo.</returns>
        </member>
        <member name="T:Orleans.TestingHost.FaultInjectionGrainStorageOptions">
            <summary>
            Options for fault injection grain storage
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.FaultInjectionGrainStorageOptions.Latency">
            <summary>
            Latency applied on storage operation
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.FaultInjectionGrainStorage">
            <summary>
            Fault injection decorator for storage providers.  This allows users to inject storage exceptions to test error handling scenarios.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionGrainStorage.#ctor(Orleans.Storage.IGrainStorage,System.String,Microsoft.Extensions.Logging.ILoggerFactory,Orleans.IGrainFactory,Orleans.TestingHost.FaultInjectionGrainStorageOptions)">
            <summary>
            Default constructor which creates the decorated storage provider
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionGrainStorage.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Faults if exception is provided, otherwise calls through to  decorated storage provider.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">State data object to be populated for this grain.</param>
            <returns>Completion promise for the Read operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionGrainStorage.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Faults if exception is provided, otherwise calls through to  decorated storage provider.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">State data object to be written for this grain.</param>
            <returns>Completion promise for the Write operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionGrainStorage.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Faults if exception is provided, otherwise calls through to  decorated storage provider.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">Copy of last-known state data object for this grain.</param>
            <returns>Completion promise for the Delete operation on the specified grain.</returns>
        </member>
        <member name="T:Orleans.TestingHost.FaultInjectionGrainStorageFactory">
            <summary>
            Factory to create FaultInjectionGrainStorage
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionGrainStorageFactory.Create(System.IServiceProvider,System.String,System.Func{System.IServiceProvider,System.String,Orleans.Storage.IGrainStorage})">
            <summary>Create FaultInjectionGrainStorage</summary>
            <param name="services"></param>
            <param name="name"></param>
            <param name="injectedGrainStorageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.SiloHostBuilderExtensions.AddFaultInjectionMemoryStorage(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Orleans.Configuration.MemoryGrainStorageOptions},System.Action{Orleans.TestingHost.FaultInjectionGrainStorageOptions})">
            <summary>
            Configure silo to use FaultInjectionMemoryStorage
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHostBuilderExtensions.AddFaultInjectionMemoryStorage(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.MemoryGrainStorageOptions}},System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.TestingHost.FaultInjectionGrainStorageOptions}})">
            <summary>
            Configure silo to use FaultInjectionMemoryStorage
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHostBuilderExtensions.AddFaultInjectionMemoryStorage(Orleans.Hosting.ISiloHostBuilder,System.String,System.Action{Orleans.Configuration.MemoryGrainStorageOptions},System.Action{Orleans.TestingHost.FaultInjectionGrainStorageOptions})">
            <summary>
            Configure silo to use FaultInjectionMemoryStorage
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHostBuilderExtensions.AddFaultInjectionMemoryStorage(Orleans.Hosting.ISiloHostBuilder,System.String,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.MemoryGrainStorageOptions}},System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.TestingHost.FaultInjectionGrainStorageOptions}})">
            <summary>
            Configure silo to use FaultInjectionMemoryStorage
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHostBuilderExtensions.AddFaultInjectionMemoryStorage(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Orleans.Configuration.MemoryGrainStorageOptions},System.Action{Orleans.TestingHost.FaultInjectionGrainStorageOptions})">
            <summary>
            Configure silo to use FaultInjectionMemoryStorage
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHostBuilderExtensions.AddFaultInjectionMemoryStorage(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.MemoryGrainStorageOptions}},System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.TestingHost.FaultInjectionGrainStorageOptions}})">
            <summary>
            Configure silo to use FaultInjectionMemoryStorage
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.IStorageFaultGrain">
            <summary>
            Grain that tracks storage exceptions to be injected.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.AddFaultOnRead(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain reads state from a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.AddFaultOnWrite(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain writes state to a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.AddFaultOnClear(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain clears state in a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.OnRead(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for reading.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.OnWrite(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for writing.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.OnClear(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for clearing state.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.TestingHost.StorageFaultGrain">
            <summary>
            Grain that tracks storage exceptions to be injected.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.OnActivateAsync">
            <summary>
            This method is called at the end of the process of activating a grain.
            It is called before any messages have been dispatched to the grain.
            For grains with declared persistent state, this method is called after the State property has been populated.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.AddFaultOnRead(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain reads state from a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.AddFaultOnWrite(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain writes state to a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.AddFaultOnClear(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain clears state in a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.OnRead(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for reading.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.OnWrite(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for writing.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.OnClear(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for clearing state.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.TestingHost.Utils.AsyncResultHandle">
            <summary>
            This class is for internal testing use only.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.AsyncResultHandle.Reset">
            <summary> Reset the current result handle </summary>
        </member>
        <member name="P:Orleans.TestingHost.Utils.AsyncResultHandle.Done">
            <summary> Get or set the Done flag </summary>
        </member>
        <member name="P:Orleans.TestingHost.Utils.AsyncResultHandle.Continue">
            <summary> Get or set the Continue flag </summary>
        </member>
        <member name="P:Orleans.TestingHost.Utils.AsyncResultHandle.Exception">
            <summary> Get or set the exception of the result handle </summary>
        </member>
        <member name="P:Orleans.TestingHost.Utils.AsyncResultHandle.Result">
            <summary> Get or set the value of the result handle </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.AsyncResultHandle.WaitForFinished(System.TimeSpan)">
            <summary>
            </summary>
            <param name="timeout"></param>
            <returns>Returns <c>true</c> if operation completes before timeout</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.AsyncResultHandle.WaitForContinue(System.TimeSpan)">
            <summary>
            </summary>
            <param name="timeout"></param>
            <returns>Returns <c>true</c> if operation completes before timeout</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.AsyncResultHandle.WaitFor(System.TimeSpan,System.Func{System.Boolean})">
            <summary>
            </summary>
            <param name="timeout"></param>
            <param name="checkFlag"></param>
            <returns>Returns <c>true</c> if operation completes before timeout</returns>
        </member>
        <member name="T:Orleans.TestingHost.Utils.NullTelemetryProducer">
            <summary>
            Test telemetry producer that does nothing with the telemetry.
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.Utils.StorageEmulator">
            <summary>
            A wrapper on Azure Storage Emulator.
            </summary>
            <remarks>It might be tricky to implement this as a <see cref="T:System.IDisposable">IDisposable</see>, isolated, autonomous instance, 
            see at <see href="http://azure.microsoft.com/en-us/documentation/articles/storage-use-emulator/">Use the Azure Storage Emulator for Development and Testing</see>
            for pointers.</remarks>
        </member>
        <member name="F:Orleans.TestingHost.Utils.StorageEmulator.storageEmulatorProcessNames">
            <summary>
            The storage emulator process name. One way to enumerate running process names is
            Get-Process | Format-Table Id, ProcessName -autosize. If there were multiple storage emulator
            processes running, they would named WASTOR~1, WASTOR~2, ... WASTOR~n.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.IsStarted">
            <summary>
            Is the storage emulator already started.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.TestingHost.Utils.StorageEmulator.Exists">
            <summary>
            Checks if the storage emulator exists, i.e. is installed.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.Help">
            <summary>
            Storage Emulator help.
            </summary>
            <returns>Storage emulator help.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.TryStart">
            <summary>
            Tries to start the storage emulator.
            </summary>
            <returns><em>TRUE</em> if the process was started successfully. <em>FALSE</em> otherwise.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.Start">
            <summary>
            Starts the storage emulator if not already started.
            </summary>
            <returns><em>TRUE</em> if the process was stopped successfully or was already started. <em>FALSE</em> otherwise.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.Stop">
            <summary>
            Stops the storage emulator if started.
            </summary>
            <returns><em>TRUE</em> if the process was stopped successfully or was already stopped. <em>FALSE</em> otherwise.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.CreateProcessArguments(System.String)">
            <summary>
            Creates a new <see cref="T:System.Diagnostics.ProcessStartInfo">ProcessStartInfo</see> to be used as an argument
            to other operations in this class.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>A new <see cref="T:System.Diagnostics.ProcessStartInfo">ProcessStartInfo</see> that has the given arguments.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.GetStorageEmulatorProcess">
            <summary>
            Queries the storage emulator process from the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.GetStorageEmulatorPath">
            <summary>
            Returns a full path to the storage emulator executable, including the executable name and file extension.
            </summary>
            <returns>A full path to the storage emulator executable, or null if not found.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.GetProgramFilesBasePath">
            <summary>
            Determines the Program Files base directory.
            </summary>
            <returns>The Program files base directory.</returns>
        </member>
        <member name="T:Orleans.TestingHost.Utils.TestingUtils">
            <summary> Collection of test utilities </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.ConfigureDefaultLoggingBuilder(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)">
            <summary>
            Configure <paramref name="builder"/> with a <see cref="T:Orleans.TestingHost.Logging.FileLoggerProvider"/> which logs to <paramref name="filePath"/>
            by default;
            </summary>
            <param name="builder"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.CreateTraceFileName(System.String,System.String)">
            <summary>
            Create trace file name for a specific node or client in a specific deployment
            </summary>
            <param name="nodeName"></param>
            <param name="clusterId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.CreateDefaultLoggerFactory(System.String)">
            <summary>
            Create the default logger factory, which would configure logger factory with a <see cref="T:Orleans.TestingHost.Logging.FileLoggerProvider"/> that writes logs to <paramref name="filePath"/> and console.
            by default;
            </summary>
            <param name="filePath">the logger file path</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.CreateDefaultLoggerFactory(System.String,Microsoft.Extensions.Logging.LoggerFilterOptions)">
            <summary>
            Create the default logger factory, which would configure logger factory with a <see cref="T:Orleans.TestingHost.Logging.FileLoggerProvider"/> that writes logs to <paramref name="filePath"/> and console.
            by default;
            </summary>
            <param name="filePath">the logger file path</param>
            <param name="filters">log filters you want to configure your logging with</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.WaitUntilAsync(System.Func{System.Boolean,System.Threading.Tasks.Task{System.Boolean}},System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary> Run the predicate until it succeed or times out </summary>
            <param name="predicate">The predicate to run</param>
            <param name="timeout">The timeout value</param>
            <param name="delayOnFail">The time to delay next call upon failure</param>
            <returns>True if the predicate succeed, false otherwise</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.Multiply(System.TimeSpan,System.Double)">
            <summary> Multiply a timeout by a value </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.ConfigureThreadPoolSettingsForStorageTests(System.Int32)">
            <summary> Configure the ThreadPool and the ServicePointManager for tests </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.RoundTripDotNetSerializer``1(``0,Orleans.IGrainFactory,Orleans.Serialization.SerializationManager)">
            <summary> Serialize and deserialize the input </summary>
            <typeparam name="T">The type of the input</typeparam>
            <param name="input">The input to serialize and deserialize</param>
            <param name="grainFactory">The grain factory.</param>
            <param name="serializationManager">The serialization manager.</param>
            <returns>Input that have been serialized and then deserialized</returns>
        </member>
        <member name="T:Orleans.TestingHost.Utils.ThreadSafeRandom">
            <summary>
            Thread-safe random number generator.
            Similar to the implementation by Steven Toub: http://blogs.msdn.com/b/pfxteam/archive/2014/10/20/9434171.aspx
            </summary>
        </member>
    </members>
</doc>
