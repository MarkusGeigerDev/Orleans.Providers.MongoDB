<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Runtime.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Orleans.Configuration.SiloOptions">
            <summary>
            Silo configuration options.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloOptions.SiloName">
            <summary>
            Gets or sets the silo name.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IAttributeToFactoryMapper`1">
            <summary>
            Responsible for mapping a facet metadata to a cachable factory.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IAttributeToFactoryMapper`1.GetFactory(System.Reflection.ParameterInfo,`0)">
            <summary>
            Responsible for mapping a facet metadata to a cachable factory from the parameter and facet metadata.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloLifecycle.HighestCompletedStage">
            <summary>
            The highest lifecycle stage which has completed starting.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISiloLifecycle.LowestStoppedStage">
            <summary>
            The lowest lifecycle stage which has completed stopping.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ISiloLifecycleSubject">
            <summary>
            Observable silo lifecycle and observer.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IStartupTask">
            <summary>
            Defines an action to be taken after silo startup.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IStartupTask.Execute(System.Threading.CancellationToken)">
            <summary>
            Called after the silo has started.
            </summary>
            <param name="cancellationToken">The cancellation token which is canceled when the method must abort.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="T:Orleans.IFacetMetadata">
            <summary>
            Marker interface for facets
            </summary>
        </member>
        <member name="T:Orleans.Hosting.ISiloHost">
            <summary>
            Represents a silo instance.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ISiloHost.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts this silo.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHost.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops this silo.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
            <remarks>
            A stopped silo cannot be restarted.
            If the provided <paramref name="cancellationToken"/> is canceled or becomes canceled during execution, the silo will terminate ungracefully.
            </remarks>
        </member>
        <member name="P:Orleans.Hosting.ISiloHost.Services">
            <summary>
            Gets the service provider used by this silo.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.ISiloHost.Stopped">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> which completes when this silo stops.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.ISiloHostBuilder">
            <summary>
            Functionality for building <see cref="T:Orleans.Hosting.ISiloHost"/> instances.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.ISiloHostBuilder.Properties">
            <summary>
            A central location for sharing state between components during the host building process.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.Build">
            <summary>
            Run the given actions to initialize the host. This can only be called once.
            </summary>
            <returns>An initialized <see cref="T:Orleans.Hosting.ISiloHost"/></returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Set up the configuration for the builder itself. This will be used to initialize the <see cref="T:Orleans.Hosting.IHostingEnvironment"/>
            for use later in the build process. This can be called multiple times and the results will be additive.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the host.</param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.ConfigureAppConfiguration(System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Sets up the configuration for the remainder of the build process and application. This can be called multiple times and
            the results will be additive. The results will be available at <see cref="P:Orleans.Hosting.HostBuilderContext.Configuration"/> for
            subsequent operations, as well as in <see cref="P:Orleans.Hosting.ISiloHost.Services"/>.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the application.</param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.ConfigureServices(System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> that will be used
            to construct the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})">
            <summary>
            Overrides the factory used to create the service provider.
            </summary>
            <typeparam name="TContainerBuilder"></typeparam>
            <param name="factory"></param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.ConfigureContainer``1(System.Action{Orleans.Hosting.HostBuilderContext,``0})">
            <summary>
            Enables configuring the instantiated dependency container. This can be called multiple times and
            the results will be additive.
            </summary>
            <typeparam name="TContainerBuilder"></typeparam>
            <param name="configureDelegate"></param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="T:Orleans.Hosting.SiloHostBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Hosting.ISiloHostBuilder"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.UseEnvironment(Orleans.Hosting.ISiloHostBuilder,System.String)">
            <summary>
            Specify the environment to be used by the host.
            </summary>
            <param name="hostBuilder">The host builder to configure.</param>
            <param name="environment">The environment to host the application in.</param>
            <returns>The host builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.ConfigureServices(Orleans.Hosting.ISiloHostBuilder,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="hostBuilder">The <see cref="T:Orleans.Hosting.ISiloHostBuilder" /> to configure.</param>
            <param name="configureDelegate"></param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.ConfigureAppConfiguration(Orleans.Hosting.ISiloHostBuilder,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Sets up the configuration for the remainder of the build process and application. This can be called multiple times and
            the results will be additive. The results will be available at <see cref="P:Orleans.Hosting.HostBuilderContext.Configuration"/> for
            subsequent operations, as well as in <see cref="P:Orleans.Hosting.ISiloHost.Services"/>.
            </summary>
            <param name="hostBuilder">The host builder to configure.</param>
            <param name="configureDelegate"></param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.Configure``1(Orleans.Hosting.ISiloHostBuilder,System.Action{``0})">
            <summary>
            Registers an action used to configure a particular type of options.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The host builder.</param>
            <param name="configureOptions">The action used to configure the options.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.Configure``1(Orleans.Hosting.ISiloHostBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers a configuration instance which <typeparamref name="TOptions"/> will bind against.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The host builder.</param>
            <param name="configuration">The configuration.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.UseServiceProviderFactory``1(Orleans.Hosting.ISiloHostBuilder,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})">
            <summary>
            Specifies how the <see cref="T:System.IServiceProvider"/> for this silo is configured. 
            </summary>
            <param name="builder">The host builder.</param>
            <param name="factory">The service provider configuration method.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.UseServiceProviderFactory(Orleans.Hosting.ISiloHostBuilder,System.Func{Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IServiceProvider})">
            <summary>
            Specifies how the <see cref="T:System.IServiceProvider"/> for this silo is configured. 
            </summary>
            <param name="builder">The host builder.</param>
            <param name="configureServiceProvider">The service provider configuration method.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.ConfigureLogging(Orleans.Hosting.ISiloHostBuilder,System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>. This may be called multiple times.
            </summary>
            <param name="builder">The <see cref="T:Orleans.Hosting.ISiloHostBuilder" /> to configure.</param>
            <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>.</param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.ConfigureLogging(Orleans.Hosting.ISiloHostBuilder,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>. This may be called multiple times.
            </summary>
            <param name="builder">The <see cref="T:Orleans.Hosting.ISiloHostBuilder" /> to configure.</param>
            <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>.</param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.GetApplicationPartManager(Orleans.Hosting.ISiloHostBuilder)">
            <summary>
            Returns the <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for this instance.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for this instance.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.ConfigureApplicationParts(Orleans.Hosting.ISiloHostBuilder,System.Action{Orleans.ApplicationParts.IApplicationPartManager})">
            <summary>
            Configures the <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> using the given <see cref="T:System.Action`1"/>.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Orleans.Hosting.HostingGrainExtensions">
            <summary>
            Methods for configuring <see cref="T:Orleans.Runtime.IGrainExtension"/>s on a silo.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.HostingGrainExtensions.AddGrainExtension``2(Orleans.Hosting.ISiloHostBuilder)">
            <summary>
            Registers a grain extension implementation for the specified interface.
            </summary>
            <typeparam name="TExtensionInterface">The <see cref="T:Orleans.Runtime.IGrainExtension"/> interface being registered.</typeparam>
            <typeparam name="TExtension">The implementation of <typeparamref name="TExtensionInterface"/>.</typeparam>
        </member>
        <member name="M:Orleans.Hosting.HostingGrainExtensions.AddGrainExtension``2(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Registers a grain extension implementation for the specified interface.
            </summary>
            <typeparam name="TExtensionInterface">The <see cref="T:Orleans.Runtime.IGrainExtension"/> interface being registered.</typeparam>
            <typeparam name="TExtension">The implementation of <typeparamref name="TExtensionInterface"/>.</typeparam>
        </member>
        <member name="T:Orleans.Hosting.ISiloBuilder">
            <summary>
            Functionality for building <see cref="T:Orleans.Hosting.ISiloHost"/> instances.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.ISiloBuilder.Properties">
            <summary>
            A central location for sharing state between components during the silo building process.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ISiloBuilder.ConfigureServices(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Configures services in the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> that will be used
            to construct the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The same instance of the silo builder for chaining.</returns>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Hosting.ISiloBuilder"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.ConfigureServices(Orleans.Hosting.ISiloBuilder,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="builder">The <see cref="T:Orleans.Hosting.ISiloBuilder" /> to configure.</param>
            <param name="configureDelegate"></param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.Configure``1(Orleans.Hosting.ISiloBuilder,System.Action{``0})">
            <summary>
            Registers an action used to configure a particular type of options.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The silo builder.</param>
            <param name="configureOptions">The action used to configure the options.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.Configure``1(Orleans.Hosting.ISiloBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers a configuration instance which <typeparamref name="TOptions"/> will bind against.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The silo builder.</param>
            <param name="configuration">The configuration.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.ConfigureLogging(Orleans.Hosting.ISiloBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>. This may be called multiple times.
            </summary>
            <param name="builder">The <see cref="T:Orleans.Hosting.ISiloBuilder" /> to configure.</param>
            <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>.</param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.ConfigureLogging(Orleans.Hosting.ISiloBuilder,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>. This may be called multiple times.
            </summary>
            <param name="builder">The <see cref="T:Orleans.Hosting.ISiloBuilder" /> to configure.</param>
            <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>.</param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.GetApplicationPartManager(Orleans.Hosting.ISiloBuilder)">
            <summary>
            Returns the <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for this instance.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for this instance.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.ConfigureApplicationParts(Orleans.Hosting.ISiloBuilder,System.Action{Orleans.ApplicationParts.IApplicationPartManager})">
            <summary>
            Configures the <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> using the given <see cref="T:System.Action`1"/>.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilderStartupExtensions">
            <summary>
            The silo builder startup extensions.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask``1(Orleans.Hosting.ISiloHostBuilder,System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <typeparam name="TStartup">
            The startup task type.
            </typeparam>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloHostBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask(Orleans.Hosting.ISiloHostBuilder,Orleans.Runtime.IStartupTask,System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="startupTask">
            The startup task.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloHostBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask(Orleans.Hosting.ISiloHostBuilder,System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="startupTask">
            The startup task.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloHostBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask``1(Orleans.Hosting.ISiloBuilder,System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <typeparam name="TStartup">
            The startup task type.
            </typeparam>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask(Orleans.Hosting.ISiloBuilder,Orleans.Runtime.IStartupTask,System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="startupTask">
            The startup task.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask(Orleans.Hosting.ISiloBuilder,System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="startupTask">
            The startup task.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloBuilder"/>.
            </returns>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilderStartupExtensions.StartupTask">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.StartupTask.Participate(Orleans.Runtime.ISiloLifecycle)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddPersistentStreams(Orleans.Hosting.ISiloHostBuilder,System.String,System.Func{System.IServiceProvider,System.String,Orleans.Streams.IQueueAdapterFactory},System.Action{Orleans.Hosting.ISiloPersistentStreamConfigurator})">
            <summary>
            Configure silo to use persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddSimpleMessageStreamProvider(Orleans.Hosting.ISiloHostBuilder,System.String,System.Action{Orleans.Hosting.ISimpleMessageStreamConfigurator})">
            <summary>
            Configure silo to use SimpleMessageProvider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddSimpleMessageStreamProvider(Orleans.Hosting.ISiloHostBuilder,System.String,System.Action{Orleans.Configuration.SimpleMessageStreamProviderOptions})">
            <summary>
            Configure silo to use SimpleMessageProvider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddSimpleMessageStreamProvider(Orleans.Hosting.ISiloHostBuilder,System.String,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.SimpleMessageStreamProviderOptions}})">
            <summary>
            Configure silo to use SimpleMessageProvider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddPersistentStreams(Orleans.Hosting.ISiloBuilder,System.String,System.Func{System.IServiceProvider,System.String,Orleans.Streams.IQueueAdapterFactory},System.Action{Orleans.Hosting.ISiloPersistentStreamConfigurator})">
            <summary>
            Configure silo to use persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddSimpleMessageStreamProvider(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Orleans.Hosting.ISimpleMessageStreamConfigurator})">
            <summary>
            Configure silo to use SimpleMessageProvider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddSimpleMessageStreamProvider(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Orleans.Configuration.SimpleMessageStreamProviderOptions})">
            <summary>
            Configure silo to use SimpleMessageProvider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddSimpleMessageStreamProvider(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.SimpleMessageStreamProviderOptions}})">
            <summary>
            Configure silo to use SimpleMessageProvider
            </summary>
        </member>
        <member name="T:Orleans.Transactions.ITransactionAgent">
            <summary>
            The Transaction Agent it is used by the silo and activations to
            interact with the transactions system.
            </summary>
            <remarks>
            There is one Transaction Agent per silo.
            TODO: does this belong in Runtime instead?
            </remarks>
        </member>
        <member name="M:Orleans.Transactions.ITransactionAgent.StartTransaction(System.Boolean,System.TimeSpan)">
            <summary>
            Starts a new transaction
            </summary>
            <param name="readOnly">Whether it is a read-only transaction</param>
            <param name="timeout">Transaction is automatically aborted if it does not complete within this time</param>
            <returns>Info of the new transaction</returns>
        </member>
        <member name="M:Orleans.Transactions.ITransactionAgent.Resolve(Orleans.Transactions.ITransactionInfo)">
            <summary>
            Attempt to Resolve a transaction.  Will commit or abort transaction
            </summary>
            <param name="transactionInfo">transaction info</param>
            <returns>null if the transaction committed successfully, or an exception otherwise.
            If the exception is OrleansTransactionInDoubtException, it means the outcome of the Commit cannot be determined; otherwise,
            the transaction is guaranteed to not have taken effect.</returns>
        </member>
        <member name="M:Orleans.Transactions.ITransactionAgent.Abort(Orleans.Transactions.ITransactionInfo)">
            <summary>
            Abort a transaction.
            </summary>
            <param name="transactionInfo"></param>
            <returns>None.</returns>
            <remarks>This method is exception-free</remarks>
        </member>
    </members>
</doc>
