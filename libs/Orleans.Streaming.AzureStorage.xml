<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Streaming.AzureStorage</name>
    </assembly>
    <members>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.AddAzureQueueStreams(Orleans.IClientBuilder,System.String,System.Action{Orleans.Hosting.ClusterClientAzureQueueStreamConfigurator})">
            <summary>
            Configure cluster client to use azure queue persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientBuilderExtensions.AddAzureQueueStreams(Orleans.IClientBuilder,System.String,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.AzureQueueOptions}})">
            <summary>
            Configure cluster client to use azure queue persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.AddAzureQueueStreams(Orleans.Hosting.ISiloHostBuilder,System.String,System.Action{Orleans.Hosting.SiloAzureQueueStreamConfigurator})">
            <summary>
            Configure silo to use azure queue persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.AddAzureQueueStreams(Orleans.Hosting.ISiloHostBuilder,System.String,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.AzureQueueOptions}})">
            <summary>
            Configure silo to use azure queue persistent streams with default settings
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.AddAzureQueueStreams(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Orleans.Hosting.SiloAzureQueueStreamConfigurator})">
            <summary>
            Configure silo to use azure queue persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.AddAzureQueueStreams(Orleans.Hosting.ISiloBuilder,System.String,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.AzureQueueOptions}})">
            <summary>
            Configure silo to use azure queue persistent streams with default settings
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.UseAzureBlobLeaseProvider(Orleans.Hosting.ISiloBuilder,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.AzureBlobLeaseProviderOptions}})">
            <summary>
            Configure silo to use azure blob lease provider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.UseAzureBlobLeaseProvider(Orleans.Hosting.ISiloHostBuilder,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.AzureBlobLeaseProviderOptions}})">
            <summary>
            Configure silo to use azure blob lease provider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderExtensions.UseAzureBlobLeaseProvider(Orleans.Hosting.ISiloPersistentStreamConfigurator,System.Action{Microsoft.Extensions.Options.OptionsBuilder{Orleans.Configuration.AzureBlobLeaseProviderOptions}})">
            <summary>
            Configure silo to use azure blob lease provider
            </summary>
        </member>
        <member name="P:Orleans.Configuration.AzureBlobLeaseProviderOptions.ServiceUri">
            <summary>
            The Service URI (e.g. https://x.blob.core.windows.net). Required for specifying <see cref="P:Orleans.Configuration.AzureBlobLeaseProviderOptions.TokenCredential"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.AzureBlobLeaseProviderOptions.TokenCredential">
            <summary>
            Use AAD to access the storage account
            </summary>
        </member>
        <member name="T:Orleans.Configuration.AzureBlobLeaseProviderOptionsValidator">
            <summary>
            Configuration validator for AzureBlobLeaseProviderOptions
            </summary>
        </member>
        <member name="M:Orleans.Configuration.AzureBlobLeaseProviderOptionsValidator.#ctor(Microsoft.Extensions.Options.IOptions{Orleans.Configuration.AzureBlobLeaseProviderOptions})">
            <summary>
            Constructor
            </summary>
            <param name="options">The option to be validated.</param>
        </member>
        <member name="M:Orleans.Configuration.AzureBlobLeaseProviderOptionsValidator.Create(System.IServiceProvider,System.String)">
            <summary>
            Creates creates validator for named instance of AzureBlobLeaseProviderOptions options.
            </summary>
            <param name="services"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Configuration.AzureBlobLeaseProviderOptionsValidator.#ctor(Orleans.Configuration.AzureBlobLeaseProviderOptions,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="options">The option to be validated.</param>
            <param name="name">The option name to be validated.</param>
        </member>
        <member name="T:Orleans.Configuration.AzureQueueOptions">
            <summary>
            Azure queue stream provider options.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.AzureQueueOptions.ServiceUri">
            <summary>
            The Service URI (e.g. https://x.queue.core.windows.net). Required for specifying <see cref="P:Orleans.Configuration.AzureQueueOptions.TokenCredential"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.AzureQueueOptions.TokenCredential">
            <summary>
            Use AAD to access the storage account
            </summary>
        </member>
        <member name="T:Orleans.Configuration.SimpleAzureQueueStreamOptions">
            <summary>
            Simple Azure queue stream provider options.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SimpleAzureQueueStreamOptions.ServiceUri">
            <summary>
            The Service URI (e.g. https://x.queue.core.windows.net). Required for specifying <see cref="P:Orleans.Configuration.SimpleAzureQueueStreamOptions.TokenCredential"/>.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SimpleAzureQueueStreamOptions.TokenCredential">
            <summary>
            Use AAD to access the storage account
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.AzureQueue.AzureQueueAdapterFactory">
            <summary> Factory class for Azure Queue based stream provider.</summary>
        </member>
        <member name="P:Orleans.Providers.Streams.AzureQueue.AzureQueueAdapterFactory.SerializationManager">
            <summary>
            Gets the serialization manager.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.AzureQueue.AzureQueueAdapterFactory.StreamFailureHandlerFactory">
            <summary>
            Application level failure handler override.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueAdapterFactory.Init">
            <summary> Init the factory.</summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueAdapterFactory.CreateAdapter">
            <summary>Creates the Azure Queue based adapter.</summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueAdapterFactory.GetQueueAdapterCache">
            <summary>Creates the adapter cache.</summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueAdapterFactory.GetStreamQueueMapper">
            <summary>Creates the factory stream queue mapper.</summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueAdapterFactory.GetDeliveryFailureHandler(Orleans.Streams.QueueId)">
            <summary>
            Creates a delivery failure handler for the specified queue.
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.AzureQueue.AzureQueueAdapterReceiver">
            <summary>
            Receives batches of messages from a single partition of a message queue.
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.AzureQueue.AzureQueueBatchContainerV2">
            <summary>
            Second version of AzureQueueBatchContainer.  This version supports external serializers (like json)
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.AzureQueue.AzureQueueStreamProviderUtils">
            <summary>
            Utility functions for azure queue Persistent stream provider.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueStreamProviderUtils.GenerateDefaultAzureQueueNames(System.String,System.String)">
            <summary>
            Generate default azure queue names
            </summary>
            <param name="serviceId"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueStreamProviderUtils.DeleteAllUsedAzureQueues(Microsoft.Extensions.Logging.ILoggerFactory,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Helper method for testing. Deletes all the queues used by the specified stream provider.
            </summary>
            <param name="loggerFactory">logger factory to use</param>
            <param name="azureQueueNames">azure queue names to be deleted.</param>
            <param name="storageConnectionString">The azure storage connection string.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueStreamProviderUtils.DeleteAllUsedAzureQueues(Microsoft.Extensions.Logging.ILoggerFactory,System.Collections.Generic.List{System.String},Orleans.Configuration.AzureQueueOptions)">
            <summary>
            Helper method for testing. Deletes all the queues used by the specified stream provider.
            </summary>
            <param name="loggerFactory">logger factory to use</param>
            <param name="azureQueueNames">azure queue names to be deleted.</param>
            <param name="queueOptions">The azure storage options.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueStreamProviderUtils.ClearAllUsedAzureQueues(Microsoft.Extensions.Logging.ILoggerFactory,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Helper method for testing. Clears all messages in all the queues used by the specified stream provider.
            </summary>
            <param name="loggerFactory">logger factory to use</param>
            <param name="azureQueueNames">The deployment ID hosting the stream provider.</param>
            <param name="storageConnectionString">The azure storage connection string.</param>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueStreamProviderUtils.ClearAllUsedAzureQueues(Microsoft.Extensions.Logging.ILoggerFactory,System.Collections.Generic.List{System.String},Orleans.Configuration.AzureQueueOptions)">
            <summary>
            Helper method for testing. Clears all messages in all the queues used by the specified stream provider.
            </summary>
            <param name="loggerFactory">logger factory to use</param>
            <param name="azureQueueNames">The deployment ID hosting the stream provider.</param>
            <param name="queueOptions">The azure storage options.</param>
        </member>
        <member name="T:Orleans.Providers.Streams.AzureQueue.AzureQueueDataAdapterV1">
            <summary>
            Original data adapter.  Here to maintain backwards compatibility, but does not support json and other custom serializers
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueDataAdapterV1.#ctor(Orleans.Serialization.SerializationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.AzureQueue.AzureQueueDataAdapterV1"/> class.
            </summary>
            <param name="serializationManager"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueDataAdapterV1.ToQueueMessage``1(System.Guid,System.String,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a cloud queue message from stream event data.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueDataAdapterV1.FromQueueMessage(System.String,System.Int64)">
            <summary>
            Creates a batch container from a cloud queue message
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.AzureQueue.AzureQueueDataAdapterV2">
            <summary>
            Data adapter that uses types that support custom serializers (like json).
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueDataAdapterV2.#ctor(Orleans.Serialization.SerializationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Providers.Streams.AzureQueue.AzureQueueDataAdapterV2"/> class.
            </summary>
            <param name="serializationManager"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueDataAdapterV2.ToQueueMessage``1(System.Guid,System.String,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a cloud queue message from stream event data.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.AzureQueueDataAdapterV2.FromQueueMessage(System.String,System.Int64)">
            <summary>
            Creates a batch container from a cloud queue message
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.AzureQueue.SimpleAzureQueueAdapterFactory">
            <summary> Factory class for Simple Azure Queue based stream provider.</summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.SimpleAzureQueueAdapterFactory.CreateAdapter">
            <summary>Creates the Simple Azure Queue based adapter.</summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.SimpleAzureQueueAdapterFactory.GetQueueAdapterCache">
            <summary>Creates the adapter cache.</summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.SimpleAzureQueueAdapterFactory.GetStreamQueueMapper">
            <summary>Creates the factory stream queue mapper.</summary>
        </member>
        <member name="M:Orleans.Providers.Streams.AzureQueue.SimpleAzureQueueAdapterFactory.GetDeliveryFailureHandler(Orleans.Streams.QueueId)">
            <summary>
            Creates a delivery failure handler for the specified queue.
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.PersistentStreams.AzureTableStorageStreamFailureHandler`1">
            <summary>
            Delivery failure handler that writes failures to azure table storage.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.AzureTableStorageStreamFailureHandler`1.#ctor(Orleans.Serialization.SerializationManager,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean,System.String,System.String,System.String,System.Func{`0})">
            <summary>
            Delivery failure handler that writes failures to azure table storage.
            </summary>
            <param name="serializationManager"></param>
            <param name="loggerFactory">logger factory to use</param>
            <param name="faultOnFailure"></param>
            <param name="clusterId"></param>
            <param name="tableName"></param>
            <param name="storageConnectionString"></param>
            <param name="createEntity"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.AzureTableStorageStreamFailureHandler`1.#ctor(Orleans.Serialization.SerializationManager,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean,System.String,Orleans.Streaming.AzureStorage.AzureStorageOperationOptions,System.Func{`0})">
            <summary>
            Delivery failure handler that writes failures to azure table storage.
            </summary>
            <param name="serializationManager"></param>
            <param name="loggerFactory">logger factory to use</param>
            <param name="faultOnFailure"></param>
            <param name="clusterId"></param>
            <param name="azureStorageOptions"></param>
            <param name="createEntity"></param>
        </member>
        <member name="P:Orleans.Providers.Streams.PersistentStreams.AzureTableStorageStreamFailureHandler`1.ShouldFaultSubsriptionOnError">
            <summary>
            Indicates if the subscription should be put in a faulted state upon stream failures
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.AzureTableStorageStreamFailureHandler`1.InitAsync">
            <summary>
            Initialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.AzureTableStorageStreamFailureHandler`1.OnDeliveryFailure(Orleans.Runtime.GuidId,System.String,Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called when an event could not be delivered to a consumer, after exhausting retry attempts.
            </summary>
            <param name="subscriptionId"></param>
            <param name="streamProviderName"></param>
            <param name="streamIdentity"></param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.AzureTableStorageStreamFailureHandler`1.OnSubscriptionFailure(Orleans.Runtime.GuidId,System.String,Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called when a subscription requested by a consumer could not be setup, after exhausting retry attempts.
            </summary>
            <param name="subscriptionId"></param>
            <param name="streamProviderName"></param>
            <param name="streamIdentity"></param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity">
            <summary>
            Delivery failure table storage entity.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.SubscriptionId">
            <summary>
            Id of the subscription on which this delivery failure occurred.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.StreamProviderName">
            <summary>
            Name of the stream provider generating this failure.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.StreamGuid">
            <summary>
            Guid Id of the stream on which the failure occurred.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.StreamNamespace">
            <summary>
            Namespace of the stream on which the failure occurred.
            </summary>
        </member>
        <member name="P:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.SequenceToken">
            <summary>
            Serialized sequence token of the event that failed delivery.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.SetPartitionKey(System.String)">
            <summary>
            Sets the partition key before persist call.
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.MakeDefaultPartitionKey(System.String,System.String)">
            <summary>
            Default partition key
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.SetRowkey">
            <summary>
            Sets the row key before persist call
            </summary>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.SetSequenceToken(Orleans.Serialization.SerializationManager,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Sets sequence token by serializing it to property.
            </summary>
            <param name="serializationManager"></param>
            <param name="token"></param>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.GetSequenceToken(Orleans.Serialization.SerializationManager)">
            <summary>
            Gets sequence token by deserializing it from property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Providers.Streams.PersistentStreams.StreamDeliveryFailureEntity.ReverseOrderTimestampTicks">
            <summary>
            Returns the number of ticks from now (UTC) to the year 9683.
            </summary>
            <remarks>
            This is useful for ordering the most recent failures at the start of the partition.  While useful
             for efficient table storage queries, under heavy failure load this may cause a hot spot in the
             table. This is not an expected occurrence, but if it happens, we recommend subdividing your row
             key with some other field (stream namespace?).
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.Providers.Streams.AzureQueue.IAzureStreamQueueMapper.PartitionToAzureQueue(Orleans.Streams.QueueId)">
            <summary>
            Gets the Azure queue name by partition
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.Providers.Streams.AzureQueue.AzureStreamQueueMapper.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Queue mapper that tracks which Azure queue was mapped to which queueId
            </summary>
            <param name="azureQueueNames">List of EventHubPartitions</param>
            <param name="queueNamePrefix">Prefix for queueIds.  Must be unique per stream provider</param>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.Providers.Streams.AzureQueue.AzureStreamQueueMapper.PartitionToAzureQueue(Orleans.Streams.QueueId)">
            <summary>
            Gets the Azure queue by partition
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streaming.AzureStorage.AzureBlobUtils">
            <summary>
            General utility functions related to Azure Blob storage.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.StoragePolicyOptions">
            <summary>
            Azure Storage Policy Options
            </summary>
        </member>
        <member name="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.ConnectionString">
            <summary>
            Connection string for Azure Cosmos DB Table
            </summary>
        </member>
        <member name="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.TokenCredential">
            <summary>
            Use AAD to retrieve the account key
            </summary>
        </member>
        <member name="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.TableEndpoint">
            <summary>
            The table endpoint (e.g. https://x.table.cosmos.azure.com.) Required for specifying <see cref="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.TokenCredential"/>.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.TableResourceId">
            <summary>
            If <see cref="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.TokenCredential"/> is used, determines, sets the ID of the table storage account
            (e.g. <c>/subscriptions/88e5ceb6-26bd-4bf5-8933-f4e05fd9efa6/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ac1</c>)
            </summary>
        </member>
        <member name="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.TokenCredentialTableKey">
            <summary>
            If <see cref="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.TokenCredential"/> is used, determines the type of key.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.TokenCredentialManagementUri">
            <summary>
            If <see cref="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.TokenCredential"/> is used, determines the management endpoint.
            </summary>
        </member>
        <member name="P:Orleans.Streaming.AzureStorage.AzureStorageOperationOptions.TableName">
            <summary>
            Table name for Azure Storage
            </summary>
        </member>
        <member name="T:Orleans.Streaming.AzureStorage.AzureTableDataManager`1">
            <summary>
            Utility class to encapsulate row-based access to Azure table storage.
            </summary>
            <typeparam name="T">Table data entry used by this table / manager.</typeparam>
        </member>
        <member name="P:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.TableName">
            <summary> Name of the table this instance is managing. </summary>
        </member>
        <member name="P:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.Logger">
            <summary> Logger for this table manager instance. </summary>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.#ctor(Orleans.Streaming.AzureStorage.AzureStorageOperationOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="options">Storage configuration.</param>
            <param name="logger">Logger to use.</param>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.InitTableAsync">
            <summary>
            Connects to, or creates and initializes a new Azure table if it does not already exist.
            </summary>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.DeleteTableAsync">
            <summary>
            Deletes the Azure table.
            </summary>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.ClearTableAsync">
            <summary>
            Deletes all entities the Azure table.
            </summary>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.CreateTableEntryAsync(`0)">
            <summary>
            Create a new data entry in the Azure table (insert new, not update existing).
            Fails if the data already exists.
            </summary>
            <param name="data">Data to be inserted into the table.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.UpsertTableEntryAsync(`0)">
            <summary>
            Inserts a data entry in the Azure table: creates a new one if does not exists or overwrites (without eTag) an already existing version (the "update in place" semantics).
            </summary>
            <param name="data">Data to be inserted or replaced in the table.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.InsertTableEntryAsync(`0)">
            <summary>
            Inserts a data entry in the Azure table: creates a new one if does not exists
            </summary>
            <param name="data">Data to be inserted or replaced in the table.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.MergeTableEntryAsync(`0,System.String)">
            <summary>
            Merges a data entry in the Azure table.
            </summary>
            <param name="data">Data to be merged in the table.</param>
            <param name="eTag">ETag to apply.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.UpdateTableEntryAsync(`0,System.String)">
            <summary>
            Updates a data entry in the Azure table: updates an already existing data in the table, by using eTag.
            Fails if the data does not already exist or of eTag does not match.
            </summary>
            <param name="data">Data to be updated into the table.</param>
            /// <param name="dataEtag">ETag to use.</param>
            <returns>Value promise with new Etag for this data entry after completing this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.DeleteTableEntryAsync(`0,System.String)">
            <summary>
            Deletes an already existing data in the table, by using eTag.
            Fails if the data does not already exist or if eTag does not match.
            </summary>
            <param name="data">Data entry to be deleted from the table.</param>
            <param name="eTag">ETag to use.</param>
            <returns>Completion promise for this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.ReadSingleTableEntryAsync(System.String,System.String)">
            <summary>
            Read a single table entry from the storage table.
            </summary>
            <param name="partitionKey">The partition key for the entry.</param>
            <param name="rowKey">The row key for the entry.</param>
            <returns>Value promise for tuple containing the data entry and its corresponding etag.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.ReadAllTableEntriesForPartitionAsync(System.String)">
            <summary>
            Read all entries in one partition of the storage table.
            NOTE: This could be an expensive and slow operation for large table partitions!
            </summary>
            <param name="partitionKey">The key for the partition to be searched.</param>
            <returns>Enumeration of all entries in the specified table partition.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.ReadAllTableEntriesAsync">
            <summary>
            Read all entries in the table.
            NOTE: This could be a very expensive and slow operation for large tables!
            </summary>
            <returns>Enumeration of all entries in the table.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.DeleteTableEntriesAsync(System.Collections.Generic.IReadOnlyCollection{System.Tuple{`0,System.String}})">
            <summary>
            Deletes a set of already existing data entries in the table, by using eTag.
            Fails if the data does not already exist or if eTag does not match.
            </summary>
            <param name="collection">Data entries and their corresponding etags to be deleted from the table.</param>
            <returns>Completion promise for this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.ReadTableEntriesAndEtagsAsync(System.String)">
            <summary>
            Read data entries and their corresponding eTags from the Azure table.
            </summary>
            <param name="filter">Filter string to use for querying the table and filtering the results.</param>
            <returns>Enumeration of entries in the table which match the query condition.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.BulkInsertTableEntries(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Inserts a set of new data entries into the table.
            Fails if the data does already exists.
            </summary>
            <param name="collection">Data entries to be inserted into the table.</param>
            <returns>Completion promise for this storage operation.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.GetAccountKeyUsingAad">
            <summary>
            Cosmos DB does not support AAD auth directly. This method uses the Azure ARM API to fetch the key.
            See https://docs.microsoft.com/en-us/azure/cosmos-db/managed-identity-based-authentication
            </summary>
        </member>
        <member name="T:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.TableQueryFilterBuilder">
            <summary>
            Helper functions for building table queries.
            </summary>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.TableQueryFilterBuilder.MatchPartitionKeyFilter(System.String)">
            <summary>
            Builds query string to match partitionkey
            </summary>
            <param name="partitionKey"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.TableQueryFilterBuilder.MatchRowKeyFilter(System.String)">
            <summary>
            Builds query string to match rowkey
            </summary>
            <param name="rowKey"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.TableQueryFilterBuilder.MatchPartitionKeyAndRowKeyFilter(System.String,System.String)">
            <summary>
            Builds a query string that matches a specific partitionkey and rowkey.
            </summary>
            <param name="partitionKey"></param>
            <param name="rowKey"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.DatabaseAccountListKeysResult">
            <summary>
            Used to deserialize the response of the <c>listKeys</c> operation.
            https://docs.microsoft.com/en-us/rest/api/cosmos-db-resource-provider/databaseaccounts/listkeys
            </summary>
        </member>
        <member name="T:Orleans.Streaming.AzureStorage.AzureTableDataManager`1.TableClientOptions">
            <summary>
            Required since ClientOptions is abstract
            </summary>
        </member>
        <member name="T:Orleans.Streaming.AzureStorage.AzureTableConstants">
            <summary>
            Constants related to Azure Table storage (also applies to Table endpoints in Cosmos DB).
            </summary>
        </member>
        <member name="T:Orleans.Streaming.AzureStorage.AzureTableUtils">
            <summary>
            General utility functions related to Azure Table storage (also applies to Table endpoints in Cosmos DB).
            </summary>
        </member>
        <member name="F:Orleans.Streaming.AzureStorage.AzureTableUtils.ANY_ETAG">
            <summary>
            ETag of value "*" to match any etag for conditional table operations (update, merge, delete).
            </summary>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableUtils.TableStorageDataNotFound(System.Exception)">
            <summary>
            Inspect an exception returned from Azure storage libraries to check whether it means that attempt was made to read some data that does not exist in storage table.
            </summary>
            <param name="exc">Exception that was returned by Azure storage library operation</param>
            <returns><c>True</c> if this exception means the data being read was not present in Azure table storage</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableUtils.ExtractRestErrorCode(System.Exception)">
            <summary>
            Extract REST error code from DataServiceClientException or DataServiceQueryException
            </summary>
            <param name="exc">Exception to be inspected.</param>
            <returns>Returns REST error code if found, otherwise <c>null</c></returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableUtils.EvaluateException(System.Exception,System.Net.HttpStatusCode@,System.String@,System.Boolean)">
            <summary>
            Examine a storage exception, and if applicable extracts the HTTP status code, and REST error code if <c>getRESTErrors=true</c>.
            </summary>
            <param name="e">Exception to be examined.</param>
            <param name="httpStatusCode">Output HTTP status code if applicable, otherwise HttpStatusCode.Unused (306)</param>
            <param name="restStatus">When <c>getRESTErrors=true</c>, will output REST error code if applicable, otherwise <c>null</c></param>
            <param name="getRESTErrors">Whether REST error code should also be examined / extracted.</param>
            <returns>Returns <c>true</c> if HTTP status code and REST error were extracted.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableUtils.IsRetriableHttpError(System.Net.HttpStatusCode,System.String)">
            <summary>
            Returns true if the specified HTTP status / error code is returned in a transient / retriable error condition
            </summary>
            <param name="httpStatusCode">HTTP error code value</param>
            <param name="restStatusCode">REST error code value</param>
            <returns><c>true</c> if this is a transient / retriable error condition</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableUtils.IsContentionError(System.Net.HttpStatusCode)">
            <summary>
            Check whether a HTTP status code returned from a REST call might be due to a (temporary) storage contention error.
            </summary>
            <param name="httpStatusCode">HTTP status code to be examined.</param>
            <returns>Returns <c>true</c> if the HTTP status code is due to storage contention.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableUtils.IsNotFoundError(System.Net.HttpStatusCode)">
            <summary>
            Check whether a HTTP status code returned from a REST call might be due to a (temporary) storage contention error.
            </summary>
            <param name="httpStatusCode">HTTP status code to be examined.</param>
            <returns>Returns <c>true</c> if the HTTP status code is due to storage contention.</returns>
        </member>
        <member name="M:Orleans.Streaming.AzureStorage.AzureTableUtils.SanitizeTableProperty(System.String)">
            <summary>
            Remove any characters that can't be used in Azure PartitionKey or RowKey values.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.AzureUtils.AzureQueueDefaultPolicies">
             <summary>
             How to use the Queue Storage Service: http://www.windowsazure.com/en-us/develop/net/how-to-guides/queue-service/
             Windows Azure Storage Abstractions and their Scalability Targets: http://blogs.msdn.com/b/windowsazurestorage/archive/2010/05/10/windows-azure-storage-abstractions-and-their-scalability-targets.aspx
             Naming Queues and Metadata: http://msdn.microsoft.com/en-us/library/windowsazure/dd179349.aspx
             Windows Azure Queues and Windows Azure Service Bus Queues - Compared and Contrasted: http://msdn.microsoft.com/en-us/library/hh767287(VS.103).aspx
             Status and Error Codes: http://msdn.microsoft.com/en-us/library/dd179382.aspx
            
             http://blogs.msdn.com/b/windowsazurestorage/archive/tags/scalability/
             http://blogs.msdn.com/b/windowsazurestorage/archive/2010/12/30/windows-azure-storage-architecture-overview.aspx
             http://blogs.msdn.com/b/windowsazurestorage/archive/2010/11/06/how-to-get-most-out-of-windows-azure-tables.aspx
            
             </summary>
        </member>
        <member name="T:Orleans.AzureUtils.AzureQueueDataManager">
            <summary>
            Utility class to encapsulate access to Azure queue storage.
            </summary>
            <remarks>
            Used by Azure queue streaming provider.
            </remarks>
        </member>
        <member name="P:Orleans.AzureUtils.AzureQueueDataManager.QueueName">
            <summary> Name of the table queue instance is managing. </summary>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Constructor.
            </summary>
            <param name="loggerFactory">logger factory to use</param>
            <param name="queueName">Name of the queue to be connected to.</param>
            <param name="storageConnectionString">Connection string for the Azure storage account used to host this table.</param>
            <param name="visibilityTimeout">A TimeSpan specifying the visibility timeout interval</param>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.String,Orleans.Configuration.AzureQueueOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="loggerFactory">logger factory to use</param>
            <param name="queueName">Name of the queue to be connected to.</param>
            <param name="options">Queue connection options.</param>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.InitQueueAsync">
            <summary>
            Initializes the connection to the queue.
            </summary>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.DeleteQueue">
            <summary>
            Deletes the queue.
            </summary>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.ClearQueue">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.AddQueueMessage(System.String)">
            <summary>
            Adds a new message to the queue.
            </summary>
            <param name="message">Message to be added to the queue.</param>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.PeekQueueMessage">
            <summary>
            Peeks in the queue for latest message, without dequeuing it.
            </summary>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.GetQueueMessage">
            <summary>
            Gets a new message from the queue.
            </summary>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.GetQueueMessages(System.Nullable{System.Int32})">
            <summary>
            Gets a number of new messages from the queue.
            </summary>
            <param name="count">Number of messages to get from the queue.</param>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.DeleteQueueMessage(Azure.Storage.Queues.Models.QueueMessage)">
            <summary>
            Deletes a messages from the queue.
            </summary>
            <param name="message">A message to be deleted from the queue.</param>
        </member>
        <member name="M:Orleans.AzureUtils.AzureQueueDataManager.GetApproximateMessageCount">
            <summary>
            Returns an approximate number of messages in the queue.
            </summary>
        </member>
    </members>
</doc>
